From ff442ae5aac8eb7c516cc4ae70fee41e63e68ab8 Mon Sep 17 00:00:00 2001
From: Bo Yu <tsu.yubo@gmail.com>
Date: Thu, 14 Feb 2019 20:46:16 +0800
Subject: [PATCH] Add proc/$PID/id

The patch for eudyptula task 14

And please consider take the patch into linux kernel v5.0.0-rc6

Signed-off-by: Bo Yu <tsu.yubo@gmail.com>
---
 fs/proc/base.c        | 52 +++++++++++++++++++++++++++++++++++++++++++++++++--
 include/linux/sched.h |  2 ++
 kernel/fork.c         |  1 +
 3 files changed, 53 insertions(+), 2 deletions(-)

diff --git a/fs/proc/base.c b/fs/proc/base.c
index 633a63462573..f6b1734b7fd3 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -100,6 +100,8 @@

 #include "../../lib/kstrtox.h"

+#define	ID_LEN	18
+
 /* NOTE:
  *	Implementing inode permission operations in /proc is almost
  *	certainly an error.  Permission checks need to happen during
@@ -2457,7 +2459,7 @@ static struct dentry *proc_pident_instantiate(struct dentry *dentry,
 	return d_splice_alias(inode, dentry);
 }

-static struct dentry *proc_pident_lookup(struct inode *dir,
+static struct dentry *proc_pident_lookup(struct inode *dir,
 					 struct dentry *dentry,
 					 const struct pid_entry *ents,
 					 unsigned int nents)
@@ -2599,7 +2601,7 @@ static const struct pid_entry attr_dir_stuff[] = {

 static int proc_attr_dir_readdir(struct file *file, struct dir_context *ctx)
 {
-	return proc_pident_readdir(file, ctx,
+	return proc_pident_readdir(file, ctx,
 				   attr_dir_stuff, ARRAY_SIZE(attr_dir_stuff));
 }

@@ -2904,6 +2906,50 @@ static int proc_pid_personality(struct seq_file *m, struct pid_namespace *ns,
 	return err;
 }

+/*
+ * When the task is created, set the id to your id.  Imaginative, I
+ * know.  You try writing these tasks.
+ *
+ * When the proc file is read from, have it print out the value of
+ * your id, and then increment it by one, allowing different tasks to
+ * have different values for the "id" file over time as they are read
+ * from.
+ */
+static ssize_t yubo_id_read(struct file *file, char __user *buf,
+		size_t count, loff_t *ppos)
+{
+	struct task_struct *task = get_proc_task(file_inode(file));
+
+	int len;
+	char id[ID_LEN];
+	int retval = -EINVAL;
+
+	if (!task)
+		goto out_task;
+
+	if (*ppos != 0) {
+		retval = 0;
+		goto out;
+	}
+
+	len = sprintf(id, "%llx\n", task->id);
+	if (copy_to_user(buf, id, ID_LEN))
+		goto out;
+
+	task->id++;
+	*ppos += len;
+	retval = len;
+out:
+	put_task_struct(task);
+out_task:
+	return retval;
+}
+
+static const struct file_operations proc_yubo_id_operations = {
+	.read = yubo_id_read,
+};
+
+
 #ifdef CONFIG_LIVEPATCH
 static int proc_pid_patch_state(struct seq_file *m, struct pid_namespace *ns,
 				struct pid *pid, struct task_struct *task)
@@ -3032,6 +3078,8 @@ static const struct pid_entry tgid_base_stuff[] = {
 #ifdef CONFIG_STACKLEAK_METRICS
 	ONE("stack_depth", S_IRUGO, proc_stack_depth),
 #endif
+	/* register /proc/$PID/id ,note attr */
+	REG("id", 0444, proc_yubo_id_operations),
 };

 static int proc_tgid_base_readdir(struct file *file, struct dir_context *ctx)
diff --git a/include/linux/sched.h b/include/linux/sched.h
index bba3afb4e9bf..acc7b8a2298c 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -1208,6 +1208,8 @@ struct task_struct {
 	unsigned long			prev_lowest_stack;
 #endif

+	u64 id;
+
 	/*
 	 * New fields for task_struct should be added above here, so that
 	 * they are included in the randomized portion of task_struct.
diff --git a/kernel/fork.c b/kernel/fork.c
index b69248e6f0e0..39b9b93c0572 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1883,6 +1883,7 @@ static __latent_entropy struct task_struct *copy_process(
 	p->sequential_io_avg	= 0;
 #endif

+	p->id = 0xe233f61cc9c6;
 	/* Perform scheduler related setup. Assign this task to a CPU. */
 	retval = sched_fork(clone_flags, p);
 	if (retval)
--
2.11.0

